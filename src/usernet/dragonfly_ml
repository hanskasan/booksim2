// $Id$

// Copyright (c) 2007-2015, Trustees of The Leland Stanford Junior University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING I ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// Dragonfly
//

// NETWORK PARAMETERS
vc_buf_size = 32;
global_vc_buf_size = 256;

wait_for_tail_credit = 0;

//
// Router architecture
//
//vc_allocator = separable_input_first; 
//vc_allocator = select; 
//sw_allocator = separable_input_first;
//sw_allocator = select;
vc_allocator = islip;
sw_allocator = islip;
alloc_iters  = 4;
priority = none;
//priority = age;


credit_delay   = 0;
routing_delay  = 1;
vc_alloc_delay = 1;
sw_alloc_delay = 1;
st_final_delay = 1;
speculative = 0;

input_speedup     = 1;
output_speedup    = 1;
internal_speedup  = 1.6;

warmup_periods = 3; //Dynamic: 10
sim_count      = 1;
max_samples    = 10; //10

sample_period  = 1000; //Dynamic: 2000

// ROUTING
routing_function = min;
//routing_function = valn;
//routing_function = par;
//routing_function = par_local;
//routing_function = par_inflight;
//routing_function = par_inflight_avg;
//routing_function = par_ratio;
//routing_function = par_ratio_inflight;
//routing_function = ugal;
//routing_function = ugal_inflight;
//routing_function = ugal_inflight_avg;
//routing_function = ugal_local;
//routing_function = ugal_ratio;
//routing_function = ugal_journal_ideal;
//routing_function = qlearn;
//routing_function = rlearng;
//routing_function = rlearnn;
//routing_function = slearn;
//routing_function = qrouting_source;
//routing_function = bandit;
//routing_function = bandit_aggressive;

num_vcs     = 4;

// TRAFFIC
traffic      	= uniform;
//traffic	= bad_dragon;
//traffic 	= randperm;
//traffic	= uniform_half;
//perm_seed	= 0;

// FOR DYNAMIC TRAFFIC
//traffic1	= uniform;
//traffic2	= bad_dragon;

//traffic1	= bad_dragon;
//traffic2	= uniform;

//traffic_change_time = 3000;

injection_rate = 0.1;
packet_size = 10;
injection_rate_uses_flits=1;

topology = dragonflynew;

k  = 4;
n  = 1;

watch_out=-;

//n_piggyback = 10;

// Output Files

//CAUTION: Recommended value is 500
latency_thres = 500.0;
