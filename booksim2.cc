// Hans Kasan
// CSNL-KAIST

#include "sst_config.h"
#include "booksim2.h"

// From BookSim's standalone main.cpp
#include <string>
#include <cstdlib>
#include <iostream>
#include <fstream>

#include <sstream>
#include "src/booksim.hpp"
#include "src/routefunc.hpp"
#include "src/traffic.hpp"
#include "src/random_utils.hpp"
#include "src/networks/network.hpp"
#include "src/injection.hpp"
#include "src/power/power_module.hpp"

using namespace SST;
using namespace SST::BookSim;
using namespace std;

// Global declarations from BookSim's standalone main.cpp
TrafficManager * trafficManager = NULL;

//uint64_t GetSimTime() {
int GetSimTime() {
    return trafficManager->getTime();
}

// HANS: FIXME: Very ugly hacks for mapping..
int NodeMapping(int in, int num_motif_nodes){
  if (num_motif_nodes == 1024) { //1DFF
    assert((in >= 0) && (in < 1024));
    int node_map[1024] = { 177, 186, 132, 694, 216, 275, 264, 129, 887, 93, 793, 699, 862, 510, 427, 348, 157, 490, 90, 358, 918, 514, 586, 658, 273, 668, 389, 406, 148, 777, 714, 302, 596, 431, 13, 911, 837, 814, 899, 1002, 175, 675, 922, 413, 700, 82, 856, 208, 308, 831, 143, 292, 535, 1004, 122, 913, 908, 35, 61, 693, 487, 751, 639, 397, 381, 718, 29, 629, 95, 315, 655, 227, 178, 925, 433, 417, 419, 552, 746, 266, 250, 284, 631, 449, 73, 495, 7, 494, 174, 450, 931, 923, 914, 12, 328, 440, 1016, 950, 474, 261, 365, 141, 907, 945, 859, 293, 489, 679, 592, 736, 51, 710, 285, 444, 91, 787, 765, 936, 46, 786, 966, 789, 669, 827, 425, 934, 424, 443, 140, 109, 204, 783, 865, 238, 937, 84, 507, 217, 917, 396, 330, 70, 548, 463, 58, 688, 201, 889, 1007, 260, 706, 603, 506, 469, 748, 630, 226, 721, 387, 170, 806, 479, 460, 532, 928, 464, 24, 47, 893, 213, 972, 750, 235, 638, 309, 467, 338, 209, 844, 512, 267, 254, 587, 578, 36, 16, 606, 538, 435, 497, 784, 626, 466, 952, 295, 1011, 768, 637, 305, 929, 401, 189, 764, 418, 595, 902, 100, 988, 4, 282, 155, 251, 415, 628, 824, 609, 845, 683, 453, 810, 54, 412, 798, 242, 307, 607, 44, 139, 390, 842, 570, 80, 473, 990, 684, 270, 610, 1008, 179, 421, 524, 123, 940, 811, 916, 504, 347, 181, 735, 411, 816, 59, 370, 998, 324, 651, 946, 351, 505, 337, 493, 530, 759, 800, 553, 67, 932, 550, 672, 56, 726, 635, 727, 894, 943, 960, 661, 964, 949, 39, 134, 792, 821, 184, 230, 674, 112, 432, 878, 851, 933, 921, 491, 225, 967, 367, 989, 195, 154, 492, 25, 883, 817, 850, 717, 333, 602, 927, 3, 445, 579, 511, 256, 304, 968, 364, 395, 231, 664, 52, 203, 969, 382, 461, 262, 663, 317, 561, 613, 341, 954, 89, 388, 1020, 745, 1017, 83, 843, 392, 525, 429, 708, 484, 919, 526, 97, 451, 331, 486, 556, 1013, 394, 719, 28, 120, 430, 1014, 426, 540, 720, 200, 10, 229, 182, 752, 101, 336, 107, 974, 633, 499, 978, 151, 361, 436, 585, 981, 313, 385, 75, 977, 785, 588, 567, 828, 223, 880, 711, 321, 904, 323, 646, 829, 677, 951, 509, 790, 253, 20, 296, 196, 274, 973, 245, 863, 485, 900, 314, 555, 773, 319, 740, 690, 729, 565, 220, 303, 423, 520, 0, 441, 571, 803, 687, 924, 259, 378, 855, 813, 802, 910, 374, 240, 920, 625, 500, 332, 830, 459, 853, 1000, 111, 618, 822, 885, 701, 730, 541, 501, 890, 529, 698, 218, 434, 869, 905, 680, 926, 961, 591, 518, 145, 682, 1019, 551, 636, 290, 393, 704, 956, 891, 847, 86, 808, 840, 886, 233, 884, 574, 985, 121, 888, 113, 660, 875, 371, 976, 50, 205, 248, 597, 211, 202, 447, 232, 728, 224, 876, 188, 775, 265, 807, 955, 971, 214, 326, 702, 537, 958, 665, 277, 299, 384, 801, 539, 62, 219, 975, 795, 695, 600, 343, 160, 281, 294, 809, 437, 478, 788, 353, 126, 173, 963, 864, 604, 312, 527, 124, 741, 796, 252, 554, 103, 475, 78, 368, 942, 1005, 632, 915, 116, 965, 244, 271, 222, 780, 366, 815, 873, 566, 137, 776, 234, 947, 171, 34, 457, 498, 670, 812, 311, 96, 939, 542, 8, 133, 22, 659, 766, 159, 125, 237, 472, 153, 581, 650, 76, 71, 547, 743, 984, 6, 362, 144, 930, 377, 66, 1015, 577, 898, 601, 528, 997, 584, 611, 987, 874, 666, 599, 117, 593, 734, 30, 369, 147, 614, 594, 246, 400, 488, 428, 957, 164, 994, 995, 354, 564, 350, 747, 517, 215, 482, 521, 1010, 172, 749, 60, 57, 197, 276, 221, 465, 563, 909, 771, 359, 165, 608, 168, 108, 678, 286, 624, 738, 127, 236, 407, 685, 519, 557, 99, 818, 575, 471, 329, 18, 138, 697, 691, 513, 247, 403, 938, 414, 568, 352, 81, 753, 980, 993, 644, 483, 288, 477, 408, 180, 452, 94, 241, 999, 470, 982, 713, 794, 983, 146, 722, 654, 1009, 320, 536, 852, 573, 373, 667, 676, 310, 1012, 31, 544, 21, 298, 648, 762, 799, 649, 731, 642, 135, 14, 805, 98, 652, 379, 102, 404, 545, 198, 439, 92, 996, 346, 55, 105, 15, 72, 289, 979, 558, 48, 948, 405, 65, 712, 199, 590, 53, 306, 627, 623, 707, 522, 935, 87, 962, 617, 572, 496, 409, 576, 689, 692, 228, 79, 280, 37, 546, 255, 291, 903, 462, 210, 5, 38, 619, 906, 162, 268, 42, 640, 681, 569, 534, 192, 476, 269, 416, 149, 778, 283, 74, 703, 912, 68, 69, 88, 131, 857, 355, 63, 456, 737, 106, 867, 992, 744, 176, 622, 755, 820, 45, 841, 533, 838, 860, 167, 781, 941, 136, 858, 41, 272, 468, 881, 206, 339, 716, 758, 340, 839, 756, 760, 1023, 391, 769, 187, 77, 991, 23, 316, 342, 380, 523, 662, 686, 657, 879, 257, 386, 118, 671, 772, 249, 986, 455, 598, 770, 641, 26, 868, 502, 944, 142, 156, 49, 40, 647, 1006, 185, 643, 656, 559, 754, 9, 653, 560, 85, 297, 733, 634, 605, 896, 508, 442, 516, 897, 399, 761, 207, 150, 580, 356, 454, 819, 398, 128, 1022, 615, 376, 193, 334, 372, 549, 278, 767, 849, 543, 836, 2, 861, 1, 420, 345, 43, 901, 742, 1003, 583, 119, 791, 645, 183, 64, 322, 892, 959, 582, 104, 287, 531, 723, 757, 616, 825, 438, 1021, 166, 11, 279, 402, 515, 562, 349, 115, 325, 448, 258, 110, 152, 870, 882, 446, 243, 191, 169, 612, 360, 877, 158, 782, 458, 19, 797, 33, 696, 383, 854, 212, 725, 163, 17, 1018, 763, 481, 871, 732, 357, 114, 480, 410, 774, 895, 503, 848, 846, 872, 620, 833, 970, 239, 823, 779, 363, 705, 724, 709, 190, 194, 953, 804, 422, 161, 834, 715, 621, 318, 327, 130, 263, 1001, 300, 344, 835, 27, 32, 826, 866, 832, 739, 335, 301, 589, 673, 375 };
    return node_map[in];

  } else if (num_motif_nodes == 4096) { //2DFF
    assert((in >= 0) && (in < 4096));
    int node_map[4096] = { 2319, 1944, 980, 3606, 2230, 363, 4060, 1047, 685, 1472, 103, 1000, 3257, 1739, 3370, 3304, 3191, 1479, 2901, 3473, 3658, 1849, 2087, 3116, 1851, 2772, 1809, 2981, 3212, 3394, 2044, 3182, 245, 3695, 1742, 3326, 3278, 724, 3246, 2839, 2045, 1436, 2946, 3329, 1705, 374, 2054, 3732, 658, 2853, 1293, 1802, 3646, 189, 3951, 2029, 251, 556, 1557, 901, 2507, 1422, 1754, 2179, 2809, 1172, 3106, 4045, 6, 3982, 888, 1667, 2962, 1868, 2192, 3812, 3980, 2540, 3509, 2108, 3343, 2184, 2607, 122, 1918, 2636, 2164, 1062, 354, 3974, 3636, 908, 1558, 2047, 3354, 2086, 789, 1162, 1287, 3061, 3504, 2104, 3657, 3055, 2704, 2708, 1610, 2417, 477, 3756, 945, 2989, 3168, 498, 2195, 2203, 3043, 15, 3318, 478, 1383, 2567, 299, 1743, 996, 1228, 1299, 461, 3031, 501, 3186, 2846, 1604, 3383, 3143, 3241, 3964, 1719, 3496, 1384, 3053, 3498, 14, 3176, 1179, 1026, 1980, 3022, 639, 3760, 2706, 476, 2797, 2874, 2875, 3780, 3427, 1142, 323, 2947, 1239, 3118, 2493, 3741, 4062, 507, 893, 2733, 4011, 3751, 1127, 898, 61, 1184, 2037, 732, 1487, 3981, 2822, 554, 190, 1407, 2031, 1764, 2497, 1997, 2089, 3670, 3863, 2180, 1039, 2745, 2510, 206, 3474, 3081, 735, 2590, 1987, 3002, 2062, 1460, 1576, 1117, 3477, 2829, 822, 688, 3682, 3878, 3335, 286, 1971, 481, 988, 2581, 2259, 1605, 1498, 696, 336, 1075, 3595, 224, 3576, 975, 2868, 764, 75, 2591, 3125, 2188, 1319, 3528, 3925, 2413, 574, 2348, 2906, 3475, 3803, 2683, 742, 1015, 297, 1776, 1334, 708, 3548, 344, 3781, 1397, 1589, 2343, 3719, 1509, 1804, 2469, 1815, 2727, 3068, 209, 546, 1051, 491, 1278, 951, 1211, 2139, 1063, 571, 3746, 3970, 2093, 238, 3171, 3067, 3924, 2242, 3284, 3562, 2186, 2885, 666, 1146, 1869, 1632, 2189, 3665, 165, 2570, 233, 1292, 3114, 1900, 26, 1977, 1569, 1714, 3707, 691, 440, 710, 3968, 771, 3469, 1378, 2448, 703, 3389, 3990, 3381, 998, 2271, 1906, 1738, 3471, 2465, 700, 3591, 844, 2262, 2055, 1852, 3351, 3521, 1937, 3446, 2329, 375, 3050, 127, 1151, 1466, 60, 910, 736, 2223, 1800, 3274, 2051, 1903, 215, 2555, 2449, 3904, 1924, 3825, 402, 3895, 1348, 2157, 2649, 3609, 2860, 4010, 3420, 664, 2654, 2432, 3585, 517, 1271, 2595, 545, 1139, 270, 1301, 1085, 2979, 2761, 2659, 1841, 2975, 2764, 2586, 1886, 178, 2729, 2445, 948, 2010, 2499, 3267, 279, 3777, 1111, 2703, 2075, 3939, 2291, 45, 2263, 3264, 899, 1155, 3305, 70, 2050, 3599, 2335, 3870, 1132, 1534, 4090, 2663, 3073, 1813, 2924, 921, 1606, 878, 1266, 2645, 3167, 397, 3765, 2933, 428, 1981, 1481, 242, 3404, 3574, 594, 3289, 3864, 2111, 832, 3873, 3909, 1656, 900, 1199, 2196, 1476, 1486, 628, 2599, 811, 3667, 1524, 1792, 659, 2993, 803, 49, 2284, 2762, 936, 1544, 2313, 126, 1996, 3336, 1185, 2315, 2406, 1385, 1707, 1428, 579, 2585, 2295, 2264, 684, 1077, 2648, 3967, 3021, 1989, 716, 2834, 3763, 903, 1177, 3155, 1720, 2140, 1932, 2056, 2305, 2936, 3312, 2960, 1570, 3823, 1217, 271, 3963, 1691, 497, 107, 1342, 3162, 1934, 4087, 3566, 1274, 3260, 3276, 3468, 2934, 2588, 3851, 3730, 1125, 1074, 1102, 3934, 180, 1464, 1889, 409, 2732, 1609, 3462, 1231, 88, 1933, 526, 1200, 2168, 3085, 2870, 2361, 3734, 2394, 1708, 2830, 3431, 2656, 424, 2435, 1011, 3553, 902, 2725, 549, 3687, 11, 1264, 3217, 733, 4027, 1029, 3762, 3513, 2550, 3739, 3772, 3527, 3283, 1904, 3515, 2351, 2461, 2504, 217, 1836, 1305, 4084, 2577, 3660, 1012, 1052, 1697, 668, 709, 221, 1573, 1936, 4001, 1042, 216, 1038, 991, 291, 3638, 1035, 3099, 1103, 3966, 3833, 1597, 1416, 1541, 1402, 3715, 69, 2842, 3661, 1703, 1698, 4004, 3001, 4069, 1526, 2955, 3984, 3788, 2357, 2775, 3144, 2770, 2835, 1415, 3098, 1325, 2134, 1168, 600, 1958, 1315, 253, 2565, 42, 981, 4054, 857, 2183, 2399, 3090, 3121, 1554, 3136, 3632, 1756, 751, 166, 1123, 3311, 1539, 842, 1590, 722, 2256, 748, 2652, 3243, 617, 1953, 2214, 345, 683, 1353, 239, 834, 2848, 693, 3224, 2457, 1480, 2467, 1885, 1140, 855, 1413, 669, 2900, 382, 3643, 2249, 2502, 3429, 2425, 2675, 788, 403, 1676, 1437, 1149, 1921, 2994, 1583, 845, 4005, 4013, 1399, 1400, 3613, 3298, 1236, 1114, 1954, 1948, 2462, 1148, 2785, 2544, 3637, 384, 1263, 531, 2325, 139, 1759, 2589, 557, 1324, 169, 698, 1577, 2633, 1514, 1916, 540, 2386, 1493, 2910, 3259, 439, 3272, 2460, 1152, 4003, 1894, 3149, 820, 57, 2040, 1649, 2041, 2453, 2415, 2147, 2618, 2356, 818, 2228, 3500, 648, 2805, 2253, 1070, 3556, 583, 799, 460, 3588, 1898, 225, 1193, 825, 2531, 1912, 2352, 3177, 102, 2337, 585, 152, 704, 3363, 2372, 1445, 2411, 2987, 1169, 3571, 3819, 2583, 2464, 1767, 3806, 2573, 1839, 3433, 1814, 2166, 2371, 1882, 1446, 1473, 838, 4089, 3044, 1372, 1157, 3874, 317, 1964, 307, 2478, 599, 2015, 149, 1844, 3041, 4088, 2613, 1679, 1092, 416, 1946, 1458, 1010, 3774, 309, 1258, 187, 2951, 4032, 135, 3503, 1167, 421, 1502, 3960, 4056, 3456, 2744, 1304, 3158, 1638, 142, 3231, 3234, 2878, 1847, 940, 1784, 1183, 609, 3189, 2841, 1873, 2592, 4094, 264, 2076, 3600, 4042, 4046, 2286, 522, 3582, 3093, 515, 776, 2889, 1262, 1495, 2204, 2625, 1143, 1766, 289, 3449, 52, 1769, 196, 129, 3286, 1030, 1243, 1371, 3936, 1408, 125, 1014, 3249, 2750, 3095, 355, 3109, 3228, 1069, 1716, 2521, 175, 2096, 1494, 2998, 3572, 3685, 786, 1138, 631, 3083, 1365, 1064, 2207, 1598, 3802, 3237, 1653, 468, 2838, 3120, 2025, 443, 1828, 487, 977, 3254, 223, 1718, 3634, 1208, 1174, 1587, 39, 3938, 1661, 1374, 1076, 1220, 1482, 2572, 475, 932, 150, 40, 284, 3664, 3855, 2547, 798, 1515, 2477, 2959, 3078, 4079, 2561, 1450, 2674, 2346, 5, 1477, 2927, 471, 198, 1238, 2991, 3074, 1447, 389, 874, 552, 2587, 3705, 2150, 1248, 1966, 3621, 535, 434, 3539, 488, 1702, 28, 2099, 2720, 2938, 2137, 1808, 601, 2202, 1752, 207, 12, 1970, 2492, 3115, 2011, 1645, 781, 938, 2017, 1699, 2498, 10, 2201, 3631, 1783, 2136, 931, 3625, 1034, 1523, 964, 2205, 3333, 1321, 3461, 3220, 889, 432, 2895, 3865, 2948, 3359, 1535, 1985, 436, 944, 768, 2119, 2864, 1360, 2881, 743, 2629, 2747, 3258, 1905, 984, 4080, 2679, 473, 1683, 1531, 3711, 159, 3458, 1740, 218, 1419, 3472, 4019, 276, 448, 2827, 793, 1600, 1571, 2438, 3688, 1994, 3064, 3767, 2151, 1449, 3559, 804, 596, 386, 2159, 3836, 2769, 1504, 2401, 2306, 3499, 2454, 3169, 1678, 530, 2002, 3679, 4091, 2060, 3173, 131, 1313, 315, 1261, 2930, 2130, 2736, 3372, 3842, 1235, 1735, 3102, 2667, 3242, 3677, 3297, 959, 4028, 1188, 3644, 2941, 1647, 352, 1516, 2390, 1999, 2339, 2534, 2403, 1833, 3821, 378, 2672, 1848, 1028, 3543, 265, 1380, 2490, 3006, 1357, 3096, 2844, 2582, 1717, 1812, 3996, 2983, 2538, 2233, 2402, 2738, 1165, 1902, 1871, 1690, 923, 2105, 2212, 650, 2052, 891, 3929, 831, 254, 3845, 2568, 3058, 3314, 2711, 2428, 2662, 3170, 479, 3330, 2661, 3017, 91, 2397, 157, 1156, 3843, 2670, 2107, 263, 2999, 1401, 2038, 1542, 584, 3866, 2556, 3147, 490, 2446, 1307, 3809, 3303, 1055, 1273, 2224, 2637, 414, 2367, 3076, 3323, 3721, 3218, 3977, 3709, 1018, 550, 3397, 2894, 3516, 915, 1207, 538, 3944, 897, 3003, 1805, 3856, 94, 1252, 756, 1406, 810, 1662, 2980, 1201, 3282, 3533, 1581, 881, 2085, 3293, 2483, 3517, 431, 2718, 2064, 3558, 3222, 2398, 3313, 1585, 1974, 3987, 3480, 2174, 153, 1095, 3693, 2828, 769, 2578, 2730, 627, 193, 4008, 1470, 2971, 3899, 2005, 1356, 3205, 41, 3862, 1442, 2321, 285, 46, 3941, 2138, 1003, 1622, 3275, 4053, 2244, 2024, 1687, 2312, 618, 2690, 3447, 1650, 1022, 1835, 3538, 2006, 2247, 282, 2127, 2978, 1887, 4063, 3581, 960, 4030, 3060, 2792, 885, 1065, 2333, 3597, 2459, 312, 96, 3564, 2908, 392, 3813, 438, 2146, 2741, 454, 2918, 3467, 2537, 714, 909, 273, 778, 3229, 2905, 2559, 2395, 1727, 1178, 969, 4035, 3036, 1533, 4085, 413, 2430, 452, 257, 3551, 109, 3919, 702, 415, 726, 214, 3641, 2436, 1972, 201, 2873, 1129, 2961, 3211, 3776, 3926, 746, 2643, 3207, 1040, 3808, 4049, 81, 872, 919, 308, 2142, 3281, 1253, 2879, 3805, 2619, 305, 1320, 875, 3037, 119, 1106, 24, 3764, 856, 213, 1865, 2996, 2027, 3027, 1746, 1363, 3070, 76, 1096, 2074, 3291, 3150, 2658, 1209, 652, 1145, 740, 3018, 1501, 1549, 3487, 1943, 973, 3013, 78, 1843, 2928, 463, 3766, 2788, 2915, 1599, 1340, 3157, 1927, 3518, 3460, 1484, 2452, 2115, 4036, 4095, 3035, 2557, 2113, 2310, 3138, 1091, 2088, 3612, 1830, 347, 420, 4047, 3128, 2419, 870, 3459, 4052, 968, 598, 3200, 124, 1595, 3514, 2118, 2036, 3718, 2472, 1664, 890, 3065, 1144, 2163, 2887, 1532, 2268, 3434, 2935, 3622, 1463, 4006, 1153, 2862, 956, 3039, 2598, 795, 1240, 3614, 1412, 2801, 2441, 985, 1551, 1899, 2019, 3779, 3331, 1438, 3793, 2495, 1734, 380, 296, 1461, 674, 387, 2208, 3411, 1823, 1529, 1081, 3199, 1726, 676, 3840, 1289, 19, 3858, 3356, 3154, 2552, 1423, 3233, 1536, 3713, 2028, 3295, 3655, 994, 3611, 653, 3033, 3244, 587, 71, 3607, 48, 1187, 2694, 1670, 3180, 1203, 3589, 2324, 1941, 1762, 112, 1892, 333, 1124, 3485, 2525, 3757, 563, 3534, 741, 1556, 752, 2001, 500, 1730, 339, 1721, 1635, 3785, 920, 2833, 2604, 1041, 3048, 3161, 2753, 1538, 1807, 2323, 3084, 3238, 3948, 2628, 911, 2535, 2819, 1060, 3452, 486, 1455, 2671, 4034, 3784, 3110, 404, 1503, 2322, 2673, 4031, 2871, 841, 2701, 1777, 3072, 2616, 2884, 3882, 2079, 1951, 2695, 1890, 3830, 3367, 3554, 485, 520, 2988, 1880, 641, 2439, 2046, 3391, 2128, 539, 1665, 2551, 3322, 2081, 1797, 760, 513, 2990, 450, 882, 3541, 2039, 2034, 2601, 655, 1294, 2548, 2716, 1161, 1952, 1474, 2149, 2773, 3724, 990, 2891, 494, 543, 3132, 2726, 2945, 2622, 2473, 2261, 449, 1441, 4040, 1855, 2187, 3648, 3077, 1870, 2776, 2215, 445, 662, 3635, 930, 168, 4067, 2282, 3432, 717, 2434, 1016, 1328, 1621, 884, 848, 4022, 2206, 1265, 3253, 886, 1636, 3942, 1254, 1939, 2278, 2225, 642, 1002, 1452, 1462, 3089, 1456, 2330, 794, 2123, 1112, 544, 3123, 1370, 883, 1027, 1004, 1845, 2382, 3580, 3419, 3814, 186, 2651, 2198, 1107, 1100, 1866, 1673, 3113, 646, 4015, 2173, 812, 620, 86, 1923, 1540, 3563, 205, 1922, 3920, 3104, 2133, 809, 3245, 1443, 3617, 1607, 3141, 3831, 578, 77, 615, 2338, 3686, 99, 3100, 3575, 2958, 248, 3544, 208, 3508, 3890, 220, 813, 482, 551, 1170, 1196, 2630, 3007, 3928, 1409, 2890, 1537, 1021, 3824, 3759, 808, 1639, 3985, 2790, 2529, 3355, 2451, 3804, 2755, 3019, 2869, 946, 759, 1308, 660, 3642, 2193, 2527, 3373, 854, 176, 2942, 819, 3531, 
                        1105, 82, 3388, 1773, 2303, 1329, 3652, 1023, 53, 2528, 1561, 1877, 2004, 3443, 3386, 3005, 851, 2049, 3201, 3510, 2342, 318, 757, 1113, 3727, 611, 1960, 3075, 3914, 3024, 1692, 1257, 3627, 1210, 1751, 2506, 827, 2898, 3822, 739, 3893, 2129, 1212, 1965, 621, 3406, 4083, 2408, 146, 3163, 1935, 942, 1613, 3593, 2487, 2765, 2571, 952, 456, 462, 2114, 1745, 143, 3464, 2364, 4016, 2728, 630, 226, 1448, 1668, 1850, 916, 3287, 1244, 1834, 3198, 4050, 922, 961, 1126, 241, 3542, 762, 1530, 3124, 2748, 427, 3672, 1643, 3881, 3598, 361, 3412, 3749, 1511, 3623, 2758, 1223, 292, 1818, 2580, 1510, 3550, 706, 1631, 2440, 2236, 1878, 2847, 447, 4043, 1819, 1131, 236, 311, 2354, 2668, 3892, 62, 4074, 1891, 1860, 2791, 2280, 2481, 1907, 2563, 1513, 1323, 2345, 2712, 3857, 3790, 643, 2759, 8, 283, 3552, 1295, 895, 3159, 868, 1940, 3266, 3794, 2721, 761, 1173, 3546, 1552, 2360, 955, 249, 1875, 18, 1025, 2471, 3015, 1311, 3675, 3908, 369, 605, 511, 2609, 3827, 3225, 1988, 2251, 677, 1154, 3994, 1410, 1268, 2082, 1968, 784, 3236, 2693, 826, 1931, 3279, 1838, 1270, 2285, 4058, 84, 2688, 3931, 1625, 3377, 2518, 1317, 183, 1492, 1787, 2546, 3319, 3261, 3195, 671, 3413, 758, 294, 2283, 418, 1928, 1290, 2916, 2603, 1863, 2845, 721, 2612, 1712, 3486, 1158, 731, 3525, 1732, 3526, 2328, 1454, 610, 3273, 2277, 1567, 862, 1058, 3063, 2832, 2700, 1660, 2921, 2982, 231, 1122, 3671, 3385, 1825, 3324, 3943, 4072, 1799, 3547, 2626, 3603, 385, 1969, 1440, 151, 2447, 860, 1663, 3991, 3577, 3699, 589, 1505, 3818, 2855, 3430, 2977, 65, 3255, 2602, 3743, 400, 2882, 2804, 518, 3440, 1312, 1094, 1657, 3435, 873, 654, 2596, 419, 1046, 1227, 72, 2594, 2522, 3415, 3568, 772, 2273, 97, 3860, 800, 2796, 2057, 797, 1195, 1579, 3872, 1045, 1630, 1234, 3861, 234, 1689, 3339, 1013, 1736, 3782, 3270, 1990, 2288, 465, 2707, 194, 1646, 2272, 929, 275, 1417, 2634, 2416, 2856, 1284, 2191, 3365, 36, 623, 123, 1300, 1626, 20, 3701, 250, 38, 3378, 1309, 219, 3750, 1233, 2911, 132, 2614, 1224, 755, 1367, 1909, 3054, 3744, 634, 3900, 1798, 145, 2615, 272, 861, 1044, 3290, 3807, 1475, 814, 3368, 1519, 2421, 2290, 2542, 3142, 459, 3537, 516, 3454, 3656, 4025, 199, 304, 815, 3886, 836, 3602, 2665, 2793, 3839, 3795, 3088, 3768, 2995, 4066, 2963, 2488, 839, 1961, 2279, 3702, 2782, 406, 1421, 3690, 4021, 1584, 970, 3175, 976, 1490, 114, 1326, 3193, 1580, 1525, 2422, 2383, 1568, 707, 120, 2084, 4000, 30, 425, 396, 3930, 2837, 1310, 3172, 3710, 1349, 1180, 637, 2584, 1386, 802, 483, 3479, 1796, 3025, 269, 2880, 2232, 2135, 2821, 349, 327, 533, 2073, 3704, 2631, 1204, 3416, 3529, 3651, 3204, 4075, 667, 3103, 3549, 1120, 2624, 597, 1774, 1398, 905, 228, 1388, 343, 3633, 2405, 3608, 2274, 3352, 830, 2866, 2156, 356, 3197, 316, 2410, 3959, 3565, 3151, 401, 2787, 2696, 3906, 3884, 1166, 1640, 3465, 1160, 3321, 2780, 1121, 3868, 1982, 1617, 2623, 612, 2377, 2012, 635, 871, 1395, 1729, 3131, 3725, 148, 3160, 3463, 3624, 1434, 727, 853, 1082, 1671, 3248, 2365, 2686, 3152, 1432, 1061, 3848, 2610, 2914, 2516, 2091, 2511, 3398, 222, 411, 1451, 4068, 723, 31, 1, 3954, 1846, 791, 833, 3417, 2939, 2532, 2092, 1562, 267, 3444, 3935, 3309, 2299, 3586, 3590, 3912, 1192, 2245, 2300, 172, 9, 2865, 1521, 3210, 2298, 3610, 1298, 2468, 1677, 1411, 729, 1053, 2697, 2407, 1959, 3156, 1811, 1335, 694, 4086, 3493, 3880, 3748, 3379, 2976, 3134, 824, 906, 3666, 3014, 340, 22, 3798, 1620, 3740, 1037, 136, 651, 625, 2276, 914, 174, 1405, 581, 2826, 2517, 2148, 2218, 3271, 983, 3012, 335, 3457, 1793, 1163, 1747, 3841, 313, 917, 2913, 567, 2368, 1737, 638, 3654, 3738, 3428, 2120, 2033, 3023, 837, 711, 2384, 95, 2237, 259, 359, 867, 7, 2952, 1680, 3038, 90, 3399, 2691, 300, 3117, 3792, 161, 3400, 1197, 3645, 876, 105, 2635, 749, 303, 525, 1553, 1686, 672, 2175, 2857, 3410, 3020, 417, 1633, 3570, 341, 1222, 649, 1071, 2231, 3369, 278, 1478, 3135, 2937, 3801, 2431, 1744, 626, 3953, 2358, 3294, 2814, 3196, 843, 2722, 1186, 1247, 1368, 2849, 2304, 4081, 3483, 1938, 2260, 2684, 1229, 1733, 3129, 1806, 3396, 93, 1303, 2388, 2986, 2221, 3816, 2820, 338, 1837, 3046, 393, 3395, 184, 3616, 332, 728, 2355, 1496, 2611, 3219, 1867, 1614, 2807, 624, 3879, 3408, 266, 3800, 3221, 1338, 536, 3907, 829, 3240, 3441, 66, 534, 3346, 1362, 3992, 3057, 918, 493, 210, 2391, 3694, 3846, 3663, 2984, 2621, 965, 2071, 288, 2520, 2281, 993, 247, 1915, 3470, 1593, 1654, 2902, 87, 1032, 3961, 1786, 570, 928, 337, 2514, 3700, 43, 619, 130, 140, 1856, 562, 2316, 3522, 2920, 0, 770, 753, 390, 805, 2317, 1097, 1725, 2533, 939, 1770, 3308, 2182, 1471, 3108, 1957, 766, 3361, 32, 1093, 1669, 334, 3265, 3340, 934, 2169, 4039, 847, 1054, 644, 3146, 2124, 3347, 3847, 869, 2067, 2931, 2444, 972, 2409, 399, 823, 255, 110, 2669, 3491, 1629, 2925, 3133, 1627, 1272, 999, 719, 453, 423, 3032, 3164, 3604, 3327, 3932, 3828, 997, 2503, 2896, 2724, 2070, 1685, 351, 2904, 3787, 1182, 2903, 306, 2293, 2746, 966, 2859, 2786, 3726, 569, 1001, 937, 3008, 1578, 1469, 3209, 1701, 958, 1522, 2381, 2771, 3947, 3915, 1696, 2023, 2, 1749, 1794, 2966, 1376, 510, 750, 2296, 2171, 2783, 383, 2443, 366, 2512, 3366, 3179, 3913, 880, 2227, 2069, 4048, 2858, 3183, 3940, 780, 1351, 2974, 2470, 4024, 3119, 3451, 256, 298, 1396, 3771, 3917, 1876, 3320, 367, 376, 4007, 697, 2545, 188, 614, 98, 16, 2886, 943, 1213, 3226, 807, 1728, 3045, 3684, 713, 1634, 1603, 3403, 3393, 1512, 1282, 3592, 2810, 503, 2863, 3337, 1327, 2689, 3820, 4009, 1992, 2836, 1427, 4051, 1083, 3052, 3357, 3691, 1926, 472, 1084, 2526, 3986, 3956, 1136, 2396, 1181, 2340, 1785, 892, 2294, 2500, 2393, 3647, 3112, 2851, 3071, 3524, 1582, 2132, 3424, 1277, 1831, 1588, 1237, 3579, 1459, 1788, 1079, 35, 1020, 2301, 586, 2331, 1043, 3891, 863, 2238, 466, 1137, 106, 790, 2125, 2795, 1159, 1418, 564, 2297, 2752, 561, 2250, 864, 3010, 2121, 1644, 54, 1624, 1594, 2334, 1109, 3978, 775, 353, 1586, 2021, 3188, 1879, 3532, 2426, 2574, 532, 2302, 2888, 3476, 1973, 548, 3584, 422, 1141, 1781, 521, 3466, 398, 3569, 407, 2944, 350, 1250, 3898, 2640, 2257, 1007, 3501, 455, 277, 470, 3849, 1750, 773, 2347, 2968, 2956, 542, 2731, 3269, 3896, 3268, 1527, 1995, 3450, 1049, 37, 63, 2717, 1760, 879, 3382, 4020, 492, 2593, 1967, 3349, 1444, 519, 2229, 1731, 3262, 1832, 227, 1789, 430, 4002, 1910, 1775, 1945, 2161, 200, 3735, 1955, 2216, 34, 4093, 2883, 2617, 2767, 3626, 1050, 632, 2823, 3174, 2491, 3080, 3972, 816, 2774, 3029, 2404, 2566, 3506, 1520, 3957, 806, 992, 173, 2437, 3975, 3640, 280, 290, 894, 2536, 3901, 4071, 1508, 2311, 2739, 1306, 1457, 3062, 2817, 2152, 2379, 3998, 2831, 1715, 287, 3235, 182, 2940, 3889, 2877, 2494, 852, 3983, 725, 3251, 2681, 962, 509, 3993, 2553, 1771, 4076, 2632, 3789, 3949, 4033, 330, 499, 1404, 3004, 329, 3783, 80, 2063, 3927, 368, 92, 1488, 2505, 3288, 260, 429, 2000, 111, 3438, 896, 1280, 1978, 1648, 4023, 2997, 3091, 2737, 1695, 1150, 2513, 1986, 645, 3482, 2943, 3484, 1821, 2854, 325, 2068, 2799, 1693, 591, 2852, 3799, 163, 164, 3950, 1591, 1390, 2710, 3202, 2605, 1829, 3437, 690, 1881, 1942, 1135, 2090, 2217, 2170, 2489, 2241, 1963, 2117, 1332, 2252, 2608, 469, 2789, 3122, 3478, 2109, 2973, 3153, 3492, 3208, 3540, 2646, 681, 2482, 785, 2757, 1375, 1694, 2048, 2485, 191, 342, 293, 3375, 1435, 3989, 2735, 58, 240, 480, 3887, 2122, 3969, 2687, 3668, 3875, 2158, 179, 3488, 1911, 2246, 828, 51, 1036, 3876, 2763, 568, 3723, 3185, 4065, 1780, 1615, 1895, 3126, 1171, 1688, 3097, 2508, 3481, 907, 3729, 2766, 1947, 2020, 2815, 2423, 3999, 2185, 4026, 2932, 3561, 1548, 2749, 3030, 595, 3696, 2375, 268, 3342, 73, 2463, 1115, 2816, 913, 1546, 2740, 2094, 3905, 3883, 1068, 1259, 629, 3520, 3056, 56, 118, 954, 1255, 3401, 3489, 3659, 1790, 3680, 3916, 3105, 705, 3731, 1666, 1226, 3194, 2638, 2742, 204, 3439, 3673, 979, 1753, 2380, 3223, 787, 3299, 2479, 2627, 1389, 695, 1175, 2349, 1128, 372, 1337, 2476, 2433, 2450, 3187, 3512, 1078, 197, 678, 1275, 1801, 2778, 1574, 2523, 2160, 1379, 1842, 1700, 737, 3662, 3560, 2803, 2103, 1164, 104, 1722, 1345, 1214, 602, 4012, 388, 2909, 3778, 607, 2350, 2141, 3838, 1346, 3203, 783, 3945, 203, 302, 904, 1757, 2639, 1550, 1930, 2458, 3578, 2065, 1339, 1874, 3239, 582, 817, 2685, 1246, 2501, 3523, 782, 927, 212, 745, 2779, 2922, 622, 606, 3317, 2486, 3859, 2022, 3979, 877, 243, 1099, 3826, 2102, 154, 357, 1827, 1659, 1073, 718, 527, 2220, 1283, 346, 2972, 3490, 2682, 744, 2713, 971, 4064, 2642, 1872, 1009, 1465, 3192, 113, 1350, 1330, 1059, 2923, 474, 1393, 1611, 441, 767, 162, 1979, 1917, 754, 21, 1215, 3933, 1316, 3639, 412, 2018, 1491, 67, 2043, 2957, 2692, 4037, 573, 3706, 3844, 613, 192, 108, 2666, 134, 566, 2912, 1914, 3111, 167, 1206, 1104, 3107, 2456, 821, 1619, 3345, 2267, 2080, 370, 2007, 3619, 3358, 1913, 1245, 3292, 3392, 1343, 3101, 3573, 1194, 3505, 3230, 3145, 3190, 3615, 3676, 1861, 1506, 1361, 426, 3535, 2309, 2798, 1724, 846, 3678, 2265, 2953, 1642, 3770, 321, 2369, 2013, 2154, 3620, 925, 4044, 3306, 2235, 508, 229, 2042, 2709, 1949, 3958, 141, 2009, 2541, 2515, 2289, 3390, 3829, 3976, 3426, 933, 3059, 576, 324, 1108, 2014, 3507, 1641, 444, 2370, 3353, 1528, 1608, 1763, 2530, 3567, 2059, 3601, 1426, 147, 1652, 2145, 3178, 2287, 588, 2806, 3834, 2818, 2197, 3885, 2078, 1854, 1387, 2341, 3445, 505, 3232, 926, 2392, 405, 575, 1684, 1355, 2400, 4055, 523, 3650, 1748, 1008, 3328, 3348, 2954, 4038, 3649, 3867, 2181, 1704, 1810, 3850, 3407, 1602, 3016, 541, 3453, 774, 101, 1191, 2016, 2949, 2539, 244, 1221, 319, 2307, 680, 949, 1331, 2519, 2418, 2429, 995, 2258, 3252, 1251, 859, 1296, 2359, 3250, 2576, 3418, 1675, 2705, 512, 381, 442, 2332, 978, 3955, 1269, 1858, 2808, 3280, 2893, 1655, 3360, 3877, 2480, 50, 258, 3997, 3962, 1791, 555, 835, 2777, 2143, 692, 2194, 261, 3775, 3683, 3042, 887, 2008, 2680, 1637, 3166, 1333, 2907, 2162, 2970, 2734, 3341, 1067, 2600, 3214, 2234, 3594, 730, 3717, 1864, 529, 484, 858, 2964, 3, 3810, 3971, 3409, 1564, 1216, 2899, 3903, 230, 2843, 1202, 580, 1031, 3040, 1267, 2715, 1559, 371, 3758, 779, 3716, 3714, 1276, 2597, 1547, 3148, 2965, 1322, 3587, 866, 3137, 2176, 1347, 572, 1826, 2743, 
                        3937, 1190, 3402, 1956, 2420, 2327, 3817, 2653, 232, 1230, 801, 1358, 738, 2210, 138, 2353, 2106, 3181, 3894, 577, 2677, 2101, 3423, 2190, 2524, 3087, 2116, 1706, 796, 1225, 3256, 2554, 1392, 1403, 3897, 2867, 3422, 3674, 2967, 1489, 1897, 301, 4041, 1118, 1005, 47, 2825, 274, 2112, 524, 1713, 2794, 1086, 2756, 3747, 592, 170, 83, 1242, 2664, 865, 1281, 670, 1779, 328, 446, 1575, 3796, 1391, 3519, 3745, 687, 2992, 2032, 3946, 2061, 1024, 2240, 1908, 2248, 364, 4059, 3082, 3455, 3773, 720, 1232, 2549, 1205, 2320, 2969, 560, 1765, 2239, 3669, 3832, 2131, 3316, 144, 3853, 1778, 246, 2172, 2676, 89, 1130, 3350, 3742, 849, 1803, 1710, 3965, 3184, 365, 2270, 1817, 1543, 3092, 2813, 502, 1772, 547, 1674, 1101, 3028, 3791, 1592, 1822, 2243, 3362, 3495, 2178, 2363, 3066, 2647, 2442, 3086, 1006, 3216, 3277, 947, 2003, 2660, 1893, 912, 3213, 3618, 3127, 202, 3051, 1286, 1147, 437, 2950, 4082, 3414, 2650, 682, 1279, 3094, 957, 663, 171, 2213, 27, 395, 3296, 3364, 1089, 3130, 2165, 661, 3442, 3918, 137, 155, 2751, 1768, 2035, 1377, 986, 2784, 2387, 1424, 616, 3302, 4029, 2475, 2985, 686, 2226, 1439, 1976, 496, 44, 326, 1857, 3583, 2072, 2702, 2266, 1962, 1098, 2641, 3737, 3215, 3034, 675, 2095, 537, 950, 2644, 1993, 3653, 1741, 1859, 2275, 1364, 1019, 974, 765, 1795, 2053, 314, 1088, 2083, 699, 3263, 1072, 2308, 2861, 2897, 3911, 3692, 1467, 1983, 1483, 1429, 3753, 3852, 1134, 3922, 3596, 1998, 1468, 408, 2811, 128, 3811, 792, 2917, 435, 1497, 3497, 3425, 2326, 2100, 3557, 2177, 3555, 3720, 2211, 850, 2558, 2269, 1601, 2344, 640, 458, 3069, 2030, 777, 1433, 4018, 1291, 1884, 85, 3026, 2760, 1198, 160, 1628, 3703, 2255, 1975, 1672, 2167, 1087, 1189, 679, 3436, 3049, 3421, 2657, 4078, 1950, 3952, 74, 2719, 3605, 1453, 3797, 1249, 1116, 1394, 924, 2222, 3995, 1285, 1919, 2077, 59, 3502, 295, 1336, 1425, 1709, 2373, 1302, 3530, 1840, 358, 185, 379, 2569, 2812, 558, 4077, 394, 3755, 553, 2723, 3310, 3206, 2389, 1612, 2455, 2209, 528, 3630, 2378, 1048, 464, 636, 715, 115, 712, 734, 2097, 211, 3376, 331, 1354, 506, 3405, 3888, 3338, 593, 348, 1382, 433, 2374, 2620, 1566, 604, 2424, 673, 3374, 2678, 2509, 177, 2153, 3227, 3752, 1499, 1761, 3712, 2655, 1991, 1381, 158, 2376, 2058, 1219, 1430, 2318, 590, 2754, 2543, 2254, 514, 1711, 1555, 840, 2802, 252, 117, 116, 1853, 3301, 262, 3448, 362, 2876, 1651, 3079, 2199, 3332, 1901, 1318, 3854, 3325, 3629, 1658, 55, 2768, 2155, 1056, 1920, 156, 4092, 1565, 3285, 2781, 2562, 2314, 1431, 4057, 495, 3000, 3708, 3728, 3681, 1080, 2579, 237, 133, 2414, 2336, 1596, 2066, 1119, 29, 3988, 1824, 1816, 3921, 2110, 633, 1925, 1507, 963, 3733, 3815, 1929, 1618, 2800, 1344, 377, 665, 1260, 3736, 1682, 504, 2126, 989, 3344, 322, 17, 2292, 3697, 2466, 935, 1366, 2564, 1896, 3902, 310, 320, 2144, 3754, 2098, 4073, 3769, 360, 1862, 1681, 79, 1341, 13, 391, 3140, 1090, 3871, 1352, 2385, 2427, 2824, 100, 3973, 1241, 467, 3786, 4070, 33, 3698, 281, 3315, 608, 121, 1414, 763, 2362, 1572, 2698, 3387, 1563, 457, 941, 1314, 3047, 3835, 1359, 2699, 3139, 3628, 3165, 2026, 1616, 1066, 3689, 3545, 1560, 2872, 1518, 2219, 603, 3494, 2850, 1297, 3837, 1017, 3300, 2200, 373, 689, 2840, 1623, 1373, 2892, 2496, 181, 235, 1057, 2714, 1110, 1758, 2474, 1133, 3334, 4061, 195, 1485, 1420, 1517, 4, 3384, 701, 1033, 3722, 1288, 3511, 967, 2919, 489, 410, 25, 3247, 656, 68, 4014, 559, 987, 1723, 3307, 1369, 2366, 1984, 3869, 982, 3380, 3536, 1256, 2606, 1782, 1888, 747, 2560, 23, 451, 64, 2926, 1545, 3923, 2929, 647, 3011, 657, 1500, 3009, 3761, 4017, 1883, 1820, 1176, 3910, 565, 953, 1755, 2575, 1218, 2412, 3371, 2484 };

    return node_map[in];

  } else if (num_motif_nodes == 1056) { //DF
    assert((in >= 0) && (in < 1056));
    int node_map[1056] = { 839, 1005, 170, 218, 495, 977, 356, 363, 592, 272, 100, 665, 349, 900, 729, 874, 48, 810, 763, 731, 583, 258, 766, 331, 559, 153, 442, 879, 169, 681, 979, 719, 927, 957, 863, 854, 760, 482, 407, 144, 778, 517, 928, 904, 682, 289, 945, 179, 1018, 494, 577, 1046, 892, 730, 429, 427, 197, 881, 935, 405, 359, 251, 438, 748, 322, 346, 30, 740, 413, 864, 113, 271, 661, 252, 292, 256, 588, 817, 917, 812, 285, 147, 1036, 560, 483, 566, 26, 97, 585, 667, 1020, 60, 229, 675, 1033, 490, 354, 646, 190, 430, 815, 825, 590, 574, 674, 9, 338, 371, 613, 819, 680, 1019, 377, 207, 127, 657, 1007, 462, 281, 402, 818, 1055, 823, 925, 205, 498, 503, 777, 1052, 232, 1008, 533, 524, 886, 771, 1053, 526, 856, 658, 81, 982, 366, 452, 832, 215, 630, 138, 392, 365, 541, 551, 626, 352, 45, 1, 141, 56, 307, 369, 985, 140, 475, 447, 120, 1015, 784, 620, 508, 809, 460, 1004, 746, 21, 410, 300, 772, 368, 756, 11, 750, 555, 525, 481, 17, 931, 689, 803, 632, 621, 737, 894, 987, 434, 194, 850, 110, 912, 852, 54, 791, 754, 716, 640, 1021, 253, 888, 765, 395, 193, 662, 263, 520, 1054, 527, 435, 707, 678, 598, 123, 240, 704, 851, 386, 940, 396, 1011, 1037, 428, 473, 840, 12, 466, 547, 758, 309, 277, 1022, 650, 52, 969, 23, 860, 262, 698, 70, 295, 947, 565, 469, 87, 458, 470, 785, 20, 330, 84, 1035, 795, 549, 188, 811, 724, 1030, 930, 788, 409, 1016, 1002, 406, 172, 109, 389, 154, 264, 911, 759, 439, 873, 282, 230, 297, 513, 637, 738, 709, 423, 134, 404, 511, 575, 237, 593, 584, 332, 209, 246, 143, 361, 916, 69, 956, 506, 343, 885, 358, 831, 397, 344, 544, 814, 192, 342, 92, 175, 1045, 755, 708, 459, 167, 713, 316, 595, 799, 540, 643, 463, 691, 22, 697, 981, 820, 15, 639, 636, 992, 1014, 467, 887, 656, 654, 801, 1026, 320, 942, 42, 989, 472, 556, 696, 528, 999, 798, 891, 829, 929, 341, 994, 260, 870, 970, 426, 518, 761, 223, 586, 306, 664, 478, 762, 288, 198, 514, 2, 180, 939, 50, 441, 599, 824, 651, 996, 36, 915, 529, 944, 971, 1040, 491, 225, 972, 782, 222, 954, 177, 614, 270, 33, 938, 66, 804, 449, 563, 235, 618, 82, 350, 323, 721, 958, 1034, 7, 446, 807, 158, 672, 59, 278, 379, 612, 275, 79, 959, 920, 500, 266, 182, 687, 268, 305, 471, 843, 187, 562, 314, 485, 573, 751, 128, 247, 296, 174, 417, 431, 267, 96, 55, 291, 13, 1048, 1031, 226, 792, 108, 767, 318, 142, 220, 57, 769, 298, 670, 988, 3, 847, 58, 273, 628, 433, 615, 337, 211, 918, 313, 248, 293, 1006, 705, 668, 25, 727, 747, 534, 227, 415, 78, 432, 950, 27, 883, 542, 822, 336, 846, 908, 155, 85, 504, 421, 105, 391, 622, 181, 548, 44, 115, 516, 718, 1039, 114, 151, 102, 112, 868, 456, 63, 546, 519, 913, 121, 523, 553, 83, 653, 692, 764, 80, 394, 742, 315, 702, 673, 283, 983, 284, 695, 24, 136, 943, 280, 168, 91, 531, 16, 351, 600, 830, 325, 880, 299, 715, 372, 31, 786, 53, 378, 582, 744, 926, 176, 455, 512, 335, 787, 1032, 953, 487, 827, 204, 245, 61, 157, 842, 117, 199, 882, 493, 445, 224, 876, 94, 202, 855, 88, 86, 393, 499, 496, 99, 385, 71, 74, 119, 741, 1009, 861, 902, 450, 743, 334, 416, 633, 233, 310, 838, 877, 919, 311, 364, 381, 18, 47, 101, 388, 532, 328, 617, 933, 579, 536, 132, 340, 437, 255, 826, 89, 0, 104, 236, 234, 329, 739, 32, 68, 465, 903, 813, 242, 148, 990, 967, 353, 150, 1013, 412, 1012, 186, 327, 139, 572, 619, 995, 370, 201, 604, 418, 221, 965, 62, 834, 1042, 974, 841, 507, 326, 333, 905, 249, 419, 477, 183, 984, 217, 1041, 457, 208, 627, 581, 162, 837, 347, 666, 339, 1029, 578, 638, 530, 955, 962, 39, 634, 865, 301, 561, 276, 152, 398, 998, 635, 492, 464, 714, 403, 686, 567, 589, 866, 932, 324, 889, 453, 699, 206, 570, 800, 214, 770, 898, 348, 390, 821, 669, 774, 848, 793, 308, 858, 609, 869, 966, 37, 706, 745, 497, 934, 923, 723, 93, 440, 683, 571, 914, 106, 19, 816, 558, 596, 164, 884, 111, 580, 749, 522, 781, 231, 857, 146, 287, 997, 845, 623, 976, 538, 896, 166, 605, 899, 312, 383, 321, 376, 677, 137, 835, 29, 159, 752, 401, 948, 961, 1049, 10, 789, 72, 145, 14, 663, 126, 625, 921, 90, 135, 710, 1003, 732, 603, 833, 400, 210, 319, 768, 980, 659, 161, 712, 509, 779, 4, 98, 844, 790, 975, 893, 539, 505, 6, 703, 963, 808, 890, 946, 552, 688, 608, 75, 241, 125, 550, 796, 461, 408, 554, 1047, 849, 131, 250, 373, 679, 399, 591, 859, 479, 103, 701, 720, 384, 269, 444, 486, 425, 797, 49, 986, 978, 116, 122, 641, 355, 606, 671, 607, 647, 67, 1038, 776, 1050, 629, 171, 964, 952, 34, 265, 76, 165, 443, 545, 871, 1027, 753, 130, 228, 949, 244, 317, 238, 660, 156, 414, 360, 480, 828, 185, 474, 543, 924, 521, 239, 597, 648, 624, 1023, 8, 735, 488, 422, 1025, 775, 557, 448, 537, 717, 872, 652, 65, 936, 1017, 411, 1001, 587, 375, 173, 700, 644, 129, 28, 1044, 576, 501, 569, 163, 51, 895, 878, 41, 711, 853, 133, 216, 875, 910, 906, 693, 907, 387, 160, 783, 568, 909, 420, 655, 951, 642, 685, 243, 1024, 213, 690, 195, 973, 602, 867, 862, 196, 897, 382, 960, 279, 302, 451, 802, 993, 261, 345, 40, 191, 484, 676, 219, 454, 794, 124, 694, 773, 734, 1051, 43, 203, 611, 649, 1010, 476, 5, 380, 722, 77, 38, 502, 780, 991, 601, 436, 95, 274, 616, 515, 212, 254, 594, 178, 64, 725, 184, 424, 286, 290, 257, 728, 294, 357, 937, 1028, 726, 1043, 736, 303, 968, 259, 901, 200, 118, 941, 149, 610, 468, 805, 489, 374, 367, 304, 46, 645, 362, 684, 806, 757, 922, 73, 510, 189, 564, 35, 1000, 107, 733, 836, 631, 535 };
    return node_map[in];

  } else {
    assert(0);
  }
}

// BookSim's global variables
/* printing activity factor*/
bool gPrintActivity;

int gK; //radix
int gN; //dimension
int gC; //concentration

int gNodes;

//generate nocviewer trace
bool gTrace;

ostream * gWatchOut;

bool gIsDragonfly;

// Constructor
booksim2::booksim2(ComponentId_t id, Params& params) : Component(id)
{
    // Initialization
    BookSimConfig config;

 // Not supported
    /*
    if ( !ParseArgs( &config, argc, argv ) ) {
        cerr << "Usage: " << argv[0] << " configfile... [param=value...]" << endl;
        return 0;
    } 
    */

    // BEGIN: Override configuration with SST parameters
    bool found;
    std::string rf = params.find<string>("routing_function", "none", found); // Will return an error if the routing function is not specified
    config.Assign("routing_function", rf);
    printf("Using routing function: %s\n", rf.c_str());

    std::string topo = params.find<string>("topology", "none", found); // Will return an error if the topology is not specified
    config.Assign("topology", topo);

    int k = params.find<int>("k", 0, found);
    config.Assign("k", k);

    int n = params.find<int>("n", 0, found);
    config.Assign("n", n);

    int c = params.find<int>("c", 0, found);
    config.Assign("c", c);

    int x = params.find<int>("x", 0, found);
    config.Assign("x", x);

    int y = params.find<int>("y", 0, found);
    config.Assign("y", y);

    int xr = params.find<int>("xr", 0, found);
    config.Assign("xr", xr);

    int yr = params.find<int>("yr", 0, found);
    config.Assign("yr", yr);

    int num_vcs = params.find<int>("num_vcs", 0, found);
    config.Assign("num_vcs", num_vcs);

    int vc_buf_size = params.find<int>("vc_buf_size", 16, found);
    config.Assign("vc_buf_size", vc_buf_size);

    int global_vc_buf_size = params.find<int>("global_vc_buf_size", -1, found);
    config.Assign("global_vc_buf_size", global_vc_buf_size);

    int wait_for_tail_credit = params.find<int>("wait_for_tail_credit", 0, found);
    config.Assign("wait_for_tail_credit", wait_for_tail_credit);

    std::string priority = params.find<string>("priority", "none", found);
    config.Assign("priority", priority);

    std::string vc_alloc = params.find<string>("vc_alloc", "islip", found);
    config.Assign("vc_allocator", vc_alloc);

    std::string sw_alloc = params.find<string>("sw_alloc", "islip", found);
    config.Assign("sw_allocator", sw_alloc);

    int alloc_iters = params.find<int>("alloc_iters", 1, found);
    config.Assign("alloc_iters", alloc_iters);

    float internal_speedup = params.find<float>("internal_speedup", 1.0, found);
    config.Assign("internal_speedup", internal_speedup);

    int use_noc_latency = params.find<int>("use_noc_latency", 0, found);
    config.Assign("use_noc_latency", use_noc_latency);

    // END: Override configuration with SST parameters

    // Initialize based on our configuration
    InitializeRoutingMap( config );

    gPrintActivity = (config.GetInt("print_activity") > 0);
    gTrace = (config.GetInt("viewer_trace") > 0);
    
    string watch_out_file = config.GetStr( "watch_out" );
    if(watch_out_file == "") {
      gWatchOut = NULL;
    } else if(watch_out_file == "-") {
      gWatchOut = &cout;
    } else {
      gWatchOut = new ofstream(watch_out_file.c_str());
    }
    
    // Build network
    int subnets = config.GetInt("subnets");
    /*To include a new network, must register the network here
    *add an else if statement with the name of the network
    */
    _net.resize(subnets);
    for (int i = 0; i < subnets; ++i) {
      ostringstream name;
      name << "network_" << i;
      _net[i] = Network::New( config, name.str() );
    }

    // Create BookSimInterface instance that is derived from BookSimInterface_Base
    _num_motif_nodes = params.find<int>("num_motif_nodes", -1);
    _force_flitsize = params.find<int>("force_flitsize", 0, found);
    
    assert(_num_motif_nodes >= 0); // Must be a positive value

    _interface = (BookSimInterface_Base*)loadUserSubComponent<SST::BookSim::BookSimInterface_Base>
        ("booksim_interface", ComponentInfo::SHARE_PORTS, this, _num_motif_nodes);

    // Build traffic manager
    assert(trafficManager == NULL);
    trafficManager = TrafficManager::New( config, _net );

    // Configure link from the motif traffic (generated by Ember and Firefly) to our beloved BookSim
    //nic2booksim_link = configureLink("motif_node", new Event::Handler<booksim2>(this, &booksim2::handle_new_packets));

    // Make sure the links are successfully configured
    // If failed, check if the ports are connected in the input configuration file
    //sst_assert(nic2booksim_link, CALL_INFO, -1, "Error in %s: Link configuration failed\n", getName().c_str());

    // SST should not finish until BookSim is done
    //registerAsPrimaryComponent();
    //primaryComponentDoNotEndSim();

    // BookSim clock supplied from SST
    std::string booksim_clock = params.find<string>("booksim_clock", "1GHz", found);
    _clock_handler = new Clock::Handler<booksim2>(this, &booksim2::BabyStep);
    _booksim_tc = registerClock(booksim_clock, _clock_handler);

    // Clock is initially running, so don't need to wake BookSim up
    _is_request_alarm = false;

    // To keep the order of events as they were injected to the network
    _injected_events.resize(_num_motif_nodes);
}

booksim2::~booksim2()
{
  // Display stats
  //trafficManager->DisplayStats();
  trafficManager->_UpdateOverallStats();
  trafficManager->DisplayOverallStats();

  int subnets = config.GetInt("subnets");

  for (int i = 0; i < subnets; ++i){
    printf("Nodes: %d, subnets: %d\n", _net[i]->NumNodes(), subnets);
    delete _net[i];
  }

  delete trafficManager;
  trafficManager = NULL;
}

void booksim2::init(unsigned int phase)
{
  _interface->init(phase);
}

void booksim2::Inject(BookSimEvent* event)
{
  int src = event->getSrc();
  int dest = event->getDest();

  // Size of packets injected to BookSim
  int size;
  if (_force_flitsize > 0)  size = _force_flitsize;
  else                      size = event->getSizeInFlits();

  // if (( src == 0 ) || (src == 32))
    // printf("%d - BookSim inject from src: %d to dest: %d with size: %d at: %ld\n", GetSimTime(), src, dest, size, getCurrentSimCycle());

  // Sanity checks
  assert((src >= 0) && (src < _num_motif_nodes));
  assert((dest >= 0) && (dest < _num_motif_nodes));
  assert(size >= 0);

  // HANS: Again, very ugly hacks.. Fix this..
  int mapped_src, mapped_dest;

  mapped_src  = NodeMapping(src, _num_motif_nodes);
  mapped_dest = NodeMapping(dest, _num_motif_nodes);

  int pid = trafficManager->_InjectMotif(mapped_src, mapped_dest, size);

  // HANS: For debugging purpose, delete if not needed
  //if (((pid % 1024) == 0) || ((pid % 1024) == 1023))
  // if ((src == 0) || (src == 1))
  // if (src == 1023)
  //   printf("%d - BookSim inject with pid: %d from src: %d to dest: %d with size: %d at: %ld\n", GetSimTime(), pid, src, dest, size, getCurrentSimCycle());

  booksim_event_bundle event_bundle;
  event_bundle.event = event;
  event_bundle.ejected = false;

  _injected_events[mapped_dest].insert(make_pair(pid, event_bundle));

}

void booksim2::WakeBookSim()
{
    _is_request_alarm = false;
    Cycle_t next_cycle = reregisterClock( _booksim_tc, _clock_handler );
}

bool booksim2::IsRequestAlarm()
{
  return _is_request_alarm;
}


bool booksim2::BabyStep(Cycle_t cycle)
{

    if ((GetSimTime() % 1000) == 0){
      printf("BookSim time: %d\n", GetSimTime());
      trafficManager->UpdateStats();
      trafficManager->DisplayStats();

      printf("Outstanding: %d, Retired: %d\n", trafficManager->_PacketsOutstanding(), trafficManager->IsAllRetiredPidEmpty());
      trafficManager->_DisplayRemaining();
    }

    trafficManager->_Step();

    // FOR DEBUGGING PURPOSE
    //printf("BabyStep at: %d\n", getCurrentSimCycle());

    // Raise the 'ejected' flag
    for (int iter_node = 0; iter_node < _num_motif_nodes; iter_node++){
      if (!trafficManager->IsRetiredPidEmpty(iter_node)){
        int pid = trafficManager->GetRetiredPid(iter_node);

        map<int, booksim_event_bundle>::iterator iter_map = _injected_events[iter_node].find(pid);
        BookSimEvent* event = iter_map->second.event;
        iter_map->second.ejected = true;
        
        int dest = event->getDest();
        int mapped_dest = NodeMapping(dest, _num_motif_nodes);
        assert(mapped_dest == iter_node);
      }
    }

    // Send event back to NIC following the order of arrival
    bool is_empty = true;

    for (int iter_node = 0; iter_node < _num_motif_nodes; iter_node++){
      if (!_injected_events[iter_node].empty()){
        is_empty = false;

        map<int, booksim_event_bundle>::iterator iter_map = _injected_events[iter_node].begin();

        while (iter_map->second.ejected){
          BookSimEvent* event = iter_map->second.event;

          int dest = event->getDest();
          int mapped_dest = NodeMapping(dest, _num_motif_nodes);
          assert(mapped_dest == iter_node);

          // Tell BookSimInterface to send this event back to NIC
          _interface->send(dest, event);

          // HANS: For debugging purpose, delete if not needed
          // printf("Retiring for node: %d at time: %ld\n", iter_node, getCurrentSimCycle());

          // Pop the entry if the event is sent back to the NIC
          _injected_events[iter_node].erase(iter_map);

          // HANS: For debugging purpose, delete if not needed
          //printf("Pop PID: %d at:%d\n", iter_map->first, GetSimTime());

          // Fetch the next head
          if (!_injected_events[iter_node].empty()){
            iter_map = _injected_events[iter_node].begin();
          } else {
            break; // Break the while loop, proceed with the outer 'for' loop
          }
        }
      }
    }

    // Check if there is any outstanding packet in BookSim or events to be injected to the NIC
    //if (trafficManager->_PacketsOutstanding() || !trafficManager->IsAllRetiredPidEmpty()){
    if (!is_empty){
      // Return false to indicate the clock handler should not be disabled
      _is_request_alarm = false;
      return false;
    } else {
      _is_request_alarm = true;
      return true;
    }
}